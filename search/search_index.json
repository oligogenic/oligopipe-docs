{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oligopipe documentation # Click on a header on the panel above to get directed to the different main sections of this documentation oligopipe is a Python package for the discovery of candidate disease-causing variant combinations , aiming to aid in uncovering the causes of oligogenic diseases ( i.e. diseases caused by variants in a small number of genes). This tool integrates innovative machine learning methods for combinatorial variant pathogenicity prediction developed at the Interuniversity Institute of Bioinformatics in Brussels . It is available as a CLI that takes arguments (see --help ) either directly or via a YAML configuration file. What can you do with oligopipe ? # The CLI tool currently contains three modules: Commands: Run oligopipe {command} -h to get detailed help {predict,prioritize,config} predict Run a VarCoPP prediction prioritize Run a prioritization analysis with Hop config Show the template config file The PREDICT and PRIORITIZE modules both take in your variant data , preprocess it according to your submitted settings, and either predict with VarCoPP or prioritize with HOP the candidate pathogenic variant combinations in any gene pair. With CONFIG you can show a template for the input config YAML which can be used instead of / in combination with the command-line arguments. The latter will always get priority if both are given for a specific argument. Important note # The results of these pipelines are based on predictive tools. They are provided for research, educational and informational purposes only and the pathogenicity predictions should be subject to further scientific and clinical investigation. It is not in any way intended to be used as a substitute for professional medical advice, diagnosis, treatment or care.","title":"Oligopipe documentation"},{"location":"#oligopipe-documentation","text":"Click on a header on the panel above to get directed to the different main sections of this documentation oligopipe is a Python package for the discovery of candidate disease-causing variant combinations , aiming to aid in uncovering the causes of oligogenic diseases ( i.e. diseases caused by variants in a small number of genes). This tool integrates innovative machine learning methods for combinatorial variant pathogenicity prediction developed at the Interuniversity Institute of Bioinformatics in Brussels . It is available as a CLI that takes arguments (see --help ) either directly or via a YAML configuration file.","title":"Oligopipe documentation"},{"location":"#what-can-you-do-with-oligopipe","text":"The CLI tool currently contains three modules: Commands: Run oligopipe {command} -h to get detailed help {predict,prioritize,config} predict Run a VarCoPP prediction prioritize Run a prioritization analysis with Hop config Show the template config file The PREDICT and PRIORITIZE modules both take in your variant data , preprocess it according to your submitted settings, and either predict with VarCoPP or prioritize with HOP the candidate pathogenic variant combinations in any gene pair. With CONFIG you can show a template for the input config YAML which can be used instead of / in combination with the command-line arguments. The latter will always get priority if both are given for a specific argument.","title":"What can you do with oligopipe?"},{"location":"#important-note","text":"The results of these pipelines are based on predictive tools. They are provided for research, educational and informational purposes only and the pathogenicity predictions should be subject to further scientific and clinical investigation. It is not in any way intended to be used as a substitute for professional medical advice, diagnosis, treatment or care.","title":"Important note"},{"location":"about/","text":"This package is developed at the Interuniveristy Institute of Bioinformatics in Brussels , a collaborative bioinformatics research initiative between Universit\u00e9 Libre de Bruxelles (ULB) and Vrije Universiteit Brussel (VUB). Cite us # Prediction with VarCoPP(2.0): Versbraegen N., Gravel B., Nachtegael C., Renaux A., Verkinderen E., Now\u00e9 A., Lenaerts T., Papadimitriou S. (2023) Faster and more accurate pathogenic combination predictions with VarCoPP2.0. BMC Bioinformatics . 24:179. DOI: https://doi.org/10.1186/s12859-023-05291-3 Papadimitriou S., Gazzo A., Versbraegen N., Nachtegael C., Aerts J., Moreau Y., Van Dooren S., Now\u00e9 A., Smits G., Lenaerts T. (2019) Predicting disease-causing variant combinations. Proceedings of the National Academy of Sciences . 116(24):11878-11887. DOI: https://doi.org/10.1073/pnas.1815601116 Prioritization with Hop: Gravel B., Renaux A., Papadimitriou S., Smits G., Now\u00e9 A., Lenaerts T. (2024) Prioritization of oligogenic variant combinations in whole exomes. Bioinformatics . Volume 40, Issue 4, April 2024, btae184. DOI: https://doi.org/10.1093/bioinformatics/btae184 Contact us # You can reach out via: oligopipe@ibsquare.be . For any question, bug or remark we will come back to you as soon as possible.","title":"About"},{"location":"about/#cite-us","text":"Prediction with VarCoPP(2.0): Versbraegen N., Gravel B., Nachtegael C., Renaux A., Verkinderen E., Now\u00e9 A., Lenaerts T., Papadimitriou S. (2023) Faster and more accurate pathogenic combination predictions with VarCoPP2.0. BMC Bioinformatics . 24:179. DOI: https://doi.org/10.1186/s12859-023-05291-3 Papadimitriou S., Gazzo A., Versbraegen N., Nachtegael C., Aerts J., Moreau Y., Van Dooren S., Now\u00e9 A., Smits G., Lenaerts T. (2019) Predicting disease-causing variant combinations. Proceedings of the National Academy of Sciences . 116(24):11878-11887. DOI: https://doi.org/10.1073/pnas.1815601116 Prioritization with Hop: Gravel B., Renaux A., Papadimitriou S., Smits G., Now\u00e9 A., Lenaerts T. (2024) Prioritization of oligogenic variant combinations in whole exomes. Bioinformatics . Volume 40, Issue 4, April 2024, btae184. DOI: https://doi.org/10.1093/bioinformatics/btae184","title":"Cite us"},{"location":"about/#contact-us","text":"You can reach out via: oligopipe@ibsquare.be . For any question, bug or remark we will come back to you as soon as possible.","title":"Contact us"},{"location":"database/","text":"Annotation database # The oligogenic pipelines rely on an annotation database for quick retrieval of the variant, gene and gene pair input features for VarCoPP. We currently offer limited access to such a database for use in this package. If you wish to get access, please email us so that we can provide you with credentials. Pass credentials to oligopipe # As command-line arguments: Annotation database credentials: -host DB_HOST, --db-host DB_HOST Hostname of annotation database server. -u DB_USER, --db-user DB_USER User for annotation database. -pw DB_PASSWORD, --db-password DB_PASSWORD Password for annotation database. -p DB_PORT, --db-port DB_PORT Port for annotation database. In the config YAML: annotation_database: host: user: password: port:","title":"Annotation database"},{"location":"database/#annotation-database","text":"The oligogenic pipelines rely on an annotation database for quick retrieval of the variant, gene and gene pair input features for VarCoPP. We currently offer limited access to such a database for use in this package. If you wish to get access, please email us so that we can provide you with credentials.","title":"Annotation database"},{"location":"database/#pass-credentials-to-oligopipe","text":"As command-line arguments: Annotation database credentials: -host DB_HOST, --db-host DB_HOST Hostname of annotation database server. -u DB_USER, --db-user DB_USER User for annotation database. -pw DB_PASSWORD, --db-password DB_PASSWORD Password for annotation database. -p DB_PORT, --db-port DB_PORT Port for annotation database. In the config YAML: annotation_database: host: user: password: port:","title":"Pass credentials to oligopipe"},{"location":"faq/","text":"Frequently Asked Questions # If answers to your questions are not provided in this section and no information about your question is mentioned in the Documentation page, you can contact us . General FAQ # Can I include variants from multiple patients in my input? No , the analysis should be restricted to a single individual only , as oligopipe creates all possible variant combinations from your variant list assuming that they belong to the same person. If you want to analyse multiple patients, you should separate their variants in different files and explore them individually. Is there a specific input format for the insertions and deletions? oligopipe accepts different types of variant format for the insertions and deletions, involving dashes or not. You can consult the Variant Types section for a detailed explanation. What types of digenic combinations does oligopipe create? oligopipe creates all possible di-allelic, tri-allelic and tetra-llelic variant combinations between any gene pair present in your data, including heterozygous compound variants in one of the two genes. Tetra-llelic combinations with four heterozygous variants (two in each gene) are not created, as these combinations were absent from our training set. For a detailed explanation, you can consult the Creating digenic combinations section. Not all of the expected output files are generated, since no variant combinations are left after preprocessing. What should I do? You can check the following steps to explore possible solutions: Check whether the selected genome version is correct. oligopipe can annotate variants using the GRCh37/hg19 or GRCh38/hg38 genome version , see the Genome version section for more details. Try to relax your variant or gene filtering options, especially the option for keeping intronic and synonymous variants. Ensure that you have more than one gene present in your data. oligopipe makes variant combinations between gene pairs , so it requires the presence of at least two different genes in your data. If you have submitted a small number of variants, these variants may have been excluded from the analysis during the annotation process. For example, the CADD score for those variants may be missing, and as this score is important for the predictions, variants without an annotated CADD score are excluded from the analysis. A detailed list of all possible cases where your variants may be excluded is presented in the Variant Exclusion section. If you have checked the previous steps and you still experience issues, you can send us an email . SOME variants of my initial submission are missing from the results Please check the variant and/or gene filtering options you have selected during your submission, as these play an important role on the absence of some of your variants in the analysis. The variant filtering options offered by oligopipe are automatically pre-selected , unless you disable them. Make sure that the variant information and format you provided is correct for all variants. When using input from TSV, make sure that the zygosity values are not misspelled ( Heterozygous or Homozygous zygosity values are accepted), see also the tab-delimited variant list section. Otherwise, some variants may have been excluded from your analysis during the data annotation process. You can consult the Variant Exclusion section for a detailed description of such cases. For more information regarding our filtering options and the data annotation process, you can consult the Data Filtering and Annotation section. I am pretty sure that a variant is supposed to be mapped to a specific gene (according to my knowledge or the gene panel I provided), but I see another gene name instead in the results. This can happen for the following reasons: The gene symbol present at the gene panel file is not the official HGNC gene symbol. During annotation we only use the official HGNC gene symbols, and thus, we will display this symbol instead of the one that you provided. The position of the variant for that gene overlaps with other genes. In this tricky situation, we have to choose one gene to continue with predictions. We have developed a set of priority rules for that (see the Gene annotation section). Therefore, there is a chance that we have assigned this variant to another gene instead. Unfortunately, it is not possible to re-assign it to your favourite gene manually and we can potentially do changes in our database for that only during major oligopipe updates. Please note that you shouldn't change that gene name for the variant in the results, as some prediction features are gene-specific . If you think that this mapping is definitely wrong, you can send us an email . Specific to prediction with VarCoPP # Is there a limit on the number of variants I can analyse? In general, we highly recommend the use of variants from up to 300 genes , as well as the application of the variant filtering procedure that is provided with oligopipe , in order to limit the amount of non-relevant combinations that will be tested. Specific to prioritization with HOP #","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"If answers to your questions are not provided in this section and no information about your question is mentioned in the Documentation page, you can contact us .","title":"Frequently Asked Questions"},{"location":"faq/#general-faq","text":"Can I include variants from multiple patients in my input? No , the analysis should be restricted to a single individual only , as oligopipe creates all possible variant combinations from your variant list assuming that they belong to the same person. If you want to analyse multiple patients, you should separate their variants in different files and explore them individually. Is there a specific input format for the insertions and deletions? oligopipe accepts different types of variant format for the insertions and deletions, involving dashes or not. You can consult the Variant Types section for a detailed explanation. What types of digenic combinations does oligopipe create? oligopipe creates all possible di-allelic, tri-allelic and tetra-llelic variant combinations between any gene pair present in your data, including heterozygous compound variants in one of the two genes. Tetra-llelic combinations with four heterozygous variants (two in each gene) are not created, as these combinations were absent from our training set. For a detailed explanation, you can consult the Creating digenic combinations section. Not all of the expected output files are generated, since no variant combinations are left after preprocessing. What should I do? You can check the following steps to explore possible solutions: Check whether the selected genome version is correct. oligopipe can annotate variants using the GRCh37/hg19 or GRCh38/hg38 genome version , see the Genome version section for more details. Try to relax your variant or gene filtering options, especially the option for keeping intronic and synonymous variants. Ensure that you have more than one gene present in your data. oligopipe makes variant combinations between gene pairs , so it requires the presence of at least two different genes in your data. If you have submitted a small number of variants, these variants may have been excluded from the analysis during the annotation process. For example, the CADD score for those variants may be missing, and as this score is important for the predictions, variants without an annotated CADD score are excluded from the analysis. A detailed list of all possible cases where your variants may be excluded is presented in the Variant Exclusion section. If you have checked the previous steps and you still experience issues, you can send us an email . SOME variants of my initial submission are missing from the results Please check the variant and/or gene filtering options you have selected during your submission, as these play an important role on the absence of some of your variants in the analysis. The variant filtering options offered by oligopipe are automatically pre-selected , unless you disable them. Make sure that the variant information and format you provided is correct for all variants. When using input from TSV, make sure that the zygosity values are not misspelled ( Heterozygous or Homozygous zygosity values are accepted), see also the tab-delimited variant list section. Otherwise, some variants may have been excluded from your analysis during the data annotation process. You can consult the Variant Exclusion section for a detailed description of such cases. For more information regarding our filtering options and the data annotation process, you can consult the Data Filtering and Annotation section. I am pretty sure that a variant is supposed to be mapped to a specific gene (according to my knowledge or the gene panel I provided), but I see another gene name instead in the results. This can happen for the following reasons: The gene symbol present at the gene panel file is not the official HGNC gene symbol. During annotation we only use the official HGNC gene symbols, and thus, we will display this symbol instead of the one that you provided. The position of the variant for that gene overlaps with other genes. In this tricky situation, we have to choose one gene to continue with predictions. We have developed a set of priority rules for that (see the Gene annotation section). Therefore, there is a chance that we have assigned this variant to another gene instead. Unfortunately, it is not possible to re-assign it to your favourite gene manually and we can potentially do changes in our database for that only during major oligopipe updates. Please note that you shouldn't change that gene name for the variant in the results, as some prediction features are gene-specific . If you think that this mapping is definitely wrong, you can send us an email .","title":"General FAQ"},{"location":"faq/#specific-to-prediction-with-varcopp","text":"Is there a limit on the number of variants I can analyse? In general, we highly recommend the use of variants from up to 300 genes , as well as the application of the variant filtering procedure that is provided with oligopipe , in order to limit the amount of non-relevant combinations that will be tested.","title":"Specific to prediction with VarCoPP"},{"location":"faq/#specific-to-prioritization-with-hop","text":"","title":"Specific to prioritization with HOP"},{"location":"hop/","text":"Hop # Via the oligopipe prioritize submodule Hop stands for the High-throughput oligogenic prioritizer. It is a prioritization tool which, given a patients' WES data and information about the patient's disease (encoded as phenotypic terms, a list of candidate genes for the disease, or both), outputs a ranking of bi-locus variant combinations which are the most likely to cause the disease. The method has been published in Bioinformatics : https://doi.org/10.1093/bioinformatics/btae184 . Structure of Hop # METHOD Hop assigns each variant combination three scores: a Pathogenicity Score (PS), a Disease-relevance Score (DS) and a Final Score (FS). The Final Score is used to rank all variant combinations in the exome in decreasing order (i.e. the first ranked combination is the combination with the highest FS). PATHOGENICITY SCORING The PS is obtained from the VarCoPP2.0 predictor, which assigns bi-locus combinations a value between 0 and 1 which corresponds to the probability that the combination is disease-causing. For a complete description of this predictor see VarCoPP . DISEASE-RELEVANCE SCORING The DS is computed using a Random-Walk-with-Restart (RWR) algorithm in a knowledge graph. The knowledge graph used is the Biological networks and Oligogenic Combinations integrated as a Knowledge graph (BOCK), and includes biological databases and ontologies which were deemed relevant for the study of oligogenic diseases. More information on BOCK and the data sources can be found in the following article: https://doi.org/10.1186/s12859-023-05451-5 . The RWR algorithm starts from a set of seed nodes and outputs a score for each node in the network which can be interpreted as a proximity score of the node to the set of seeds. In Hop, the seed nodes can be the HPO terms describing the patient's phenotype, genes belonging to a gene panel associated with the patient's disease or both types of information. From these seeds, the RWR algorithm is used to score the proximity of all human genes. The Disease-relevance Score of a gene pair is then computed as the mean of the individual gene proximity scores. FINAL SCORING The PS and DS are normalized exome-wide using min-max normalization to ensure equal weight of the PS and DS. Then the Final Score is computed as the average of the PS and DS. The combinations are ranked in descending order, so that the combination with the highest Final Score is ranked first. Important note and implementation # Since Hop runs on all possible combinations in a provided VCF, this can lead to a large number of combinations to be predicted. In order to focus on the most relevant combinations, it is therefore implemented to only output the top N combinations, with N being a parameter that is specified by the user and defaults to 100. It is important to not use a too large value of N as it can lead to memory issues. To not keep all variant combinations in an exome in memory, Hop is therefore implemented to compute the scores of all possible variant combinations iteratively, and to only keep in memory the top N combinations.","title":"Prioritization - Hop"},{"location":"hop/#hop","text":"Via the oligopipe prioritize submodule Hop stands for the High-throughput oligogenic prioritizer. It is a prioritization tool which, given a patients' WES data and information about the patient's disease (encoded as phenotypic terms, a list of candidate genes for the disease, or both), outputs a ranking of bi-locus variant combinations which are the most likely to cause the disease. The method has been published in Bioinformatics : https://doi.org/10.1093/bioinformatics/btae184 .","title":"Hop"},{"location":"hop/#structure-of-hop","text":"METHOD Hop assigns each variant combination three scores: a Pathogenicity Score (PS), a Disease-relevance Score (DS) and a Final Score (FS). The Final Score is used to rank all variant combinations in the exome in decreasing order (i.e. the first ranked combination is the combination with the highest FS). PATHOGENICITY SCORING The PS is obtained from the VarCoPP2.0 predictor, which assigns bi-locus combinations a value between 0 and 1 which corresponds to the probability that the combination is disease-causing. For a complete description of this predictor see VarCoPP . DISEASE-RELEVANCE SCORING The DS is computed using a Random-Walk-with-Restart (RWR) algorithm in a knowledge graph. The knowledge graph used is the Biological networks and Oligogenic Combinations integrated as a Knowledge graph (BOCK), and includes biological databases and ontologies which were deemed relevant for the study of oligogenic diseases. More information on BOCK and the data sources can be found in the following article: https://doi.org/10.1186/s12859-023-05451-5 . The RWR algorithm starts from a set of seed nodes and outputs a score for each node in the network which can be interpreted as a proximity score of the node to the set of seeds. In Hop, the seed nodes can be the HPO terms describing the patient's phenotype, genes belonging to a gene panel associated with the patient's disease or both types of information. From these seeds, the RWR algorithm is used to score the proximity of all human genes. The Disease-relevance Score of a gene pair is then computed as the mean of the individual gene proximity scores. FINAL SCORING The PS and DS are normalized exome-wide using min-max normalization to ensure equal weight of the PS and DS. Then the Final Score is computed as the average of the PS and DS. The combinations are ranked in descending order, so that the combination with the highest Final Score is ranked first.","title":"Structure of Hop"},{"location":"hop/#important-note-and-implementation","text":"Since Hop runs on all possible combinations in a provided VCF, this can lead to a large number of combinations to be predicted. In order to focus on the most relevant combinations, it is therefore implemented to only output the top N combinations, with N being a parameter that is specified by the user and defaults to 100. It is important to not use a too large value of N as it can lead to memory issues. To not keep all variant combinations in an exome in memory, Hop is therefore implemented to compute the scores of all possible variant combinations iteratively, and to only keep in memory the top N combinations.","title":"Important note and implementation"},{"location":"input/","text":"Required inputs # As command-line argument: Variant input: -vcf VARIANTS_VCF, --variants-vcf VARIANTS_VCF The patient's VCF file, can be compressed. -tsv VARIANTS_TSV, --variants-tsv VARIANTS_TSV Tab-delimited text file containing the patient's variants to analyse (chrom/pos/ref/alt/zygosity). -hg {hg19,hg38}, --genome-build {hg19,hg38} The genome assembly to which the positions of your variants correspond. -s patient_sex, --patient-sex patient_sex The sex of the patient (defaults to U = undetermined). In the config YAML: patient_info: # possible values: M, F, U (undetermined) or empty sex: variant_input: # choose one of both input types vcf_file: tsv_file: genome_build: # hg19 or hg38 oligopipe accepts a list of variants from a single individual only, as it creates all possible variant combinations between pairs assuming that these belong to the same individual. You can provide both Single Nucleotide Variants (SNVs) or small insertions/deletions (indels). Larger structural variants, copy-number variants and indels of length > 100 bps can not currently be predicted. Types of input files # There are two different types of variant input that you can use to upload your data: either a variant list or a VCF file . 1. Tab-delimited variant list # Each line should contain tab- or space-delimited information for one variant, in the corresponding order: chromosome, position, reference allele, alternative allele, zygosity . The zygosity values should be either ' Heterozygous ' or ' Homozygous '. During the analysis, oligopipe automatically converts X-linked variants in males as Hemizygous. No headers are needed. 2. VCF file # Alternatively, you can submit a VCF file (version 4.2) with your variants. NOTE: The file can also be compressed either with zip, gzip, bzip2 or xz . oligopipe requires as minimum the presence of: the #Header Line : #CHROM POS ID REF ALT etc... the columns CHROM, POS, ID, REF, ALT, FORMAT, SAMPLE_NAME (patient information column containing values corresponding to the FORMAT field). the genotype (GT) field for each variant at the FORMAT and SAMPLE_NAME columns. We use GT to define the zygosity of the variant and to pick the correct alternative allele if there are multiple ones (separated by commas) in ALT. In case variants with GT: 0/0 ; 0|0 ; ./. ; . are present, these are discarded from the analysis. Allele combinations only consisting of alternative alleles (e.g. GT: 1/2 or 3/2) are handled as two separate heterozygous variants. Any other meta-information lines on the top of the file or any extra columns and fields (e.g. QUAL, INFO, etc.) can be present, but oligopipe will ignore them. NOTE: if your VCF contains information for several individuals , you should separate the information of each individual in different VCF files and run them individually. You can also download test VCFs to use with oligopipe from the ORVAL input page . Variant types # You can either submit Single Nucleotide Variants (SNVs) or small insertions/deletions (indels) . Other types of variants (e.g. CNVs) can be present in your list, but they will not be included in the analysis. Specifically for indels, you can submit your variants in either one of the two different ways that are shown for a particular variant example (the VCF file can contain more columns). Tab-delimited list VCF file Example with dashes 16 3254468 CTT - Heterozygous 16 3254468 . CTT - PASS GT 1/0 Example without dashes 16 3254467 CCTT C Heterozygous 16 3254467 . CCTT C PASS GT 1/0 Genome version # At the moment oligopipe accepts and annotates variants using either the GRCh37/hg19 or the GRCh38/hg38 human genome assembly. We do not make conversions of genomic coordinates from different genome versions. In case you need to convert your variants, you are encouraged to use tools like the UCSC , Ensembl and NCBI assembly converters. Patient information # Except from the variant list, you should also provide (if available) the sex information of the patient, i.e. if the person is a male (M) or a female (F). oligopipe handles differently X-linked variants in males ( hemizygous variants) compared to females, and therefore this information is important in order to provide better predictions. Disease information # For the prioritize option only. To run the prioritization with Hop you need to add information about the patient's disease. This can be done by providing a list of HPO terms (and more specifically the HPO ids in format HP:0000XXX ), and/or a list of candidate genes from a gene panel ( HGNC gene names and Ensembl gene ids are accepted). At least one type of information needs to be provided or the prioritization job will not run. As command-line argument: Variant input: -hpo HPO_FILE, --hpo-terms HPO_FILE File containing a list of HPO IDs (e.g. HP:0001166). -gp PANEL_FILE --panel PANEL_FILE Gene panel file, containing a list of gene names or ENSGs. In the config YAML: gene_panel_file: hpo_terms_file:","title":"Input"},{"location":"input/#required-inputs","text":"As command-line argument: Variant input: -vcf VARIANTS_VCF, --variants-vcf VARIANTS_VCF The patient's VCF file, can be compressed. -tsv VARIANTS_TSV, --variants-tsv VARIANTS_TSV Tab-delimited text file containing the patient's variants to analyse (chrom/pos/ref/alt/zygosity). -hg {hg19,hg38}, --genome-build {hg19,hg38} The genome assembly to which the positions of your variants correspond. -s patient_sex, --patient-sex patient_sex The sex of the patient (defaults to U = undetermined). In the config YAML: patient_info: # possible values: M, F, U (undetermined) or empty sex: variant_input: # choose one of both input types vcf_file: tsv_file: genome_build: # hg19 or hg38 oligopipe accepts a list of variants from a single individual only, as it creates all possible variant combinations between pairs assuming that these belong to the same individual. You can provide both Single Nucleotide Variants (SNVs) or small insertions/deletions (indels). Larger structural variants, copy-number variants and indels of length > 100 bps can not currently be predicted.","title":"Required inputs"},{"location":"input/#types-of-input-files","text":"There are two different types of variant input that you can use to upload your data: either a variant list or a VCF file .","title":"Types of input files"},{"location":"input/#1-tab-delimited-variant-list","text":"Each line should contain tab- or space-delimited information for one variant, in the corresponding order: chromosome, position, reference allele, alternative allele, zygosity . The zygosity values should be either ' Heterozygous ' or ' Homozygous '. During the analysis, oligopipe automatically converts X-linked variants in males as Hemizygous. No headers are needed.","title":"1. Tab-delimited variant list"},{"location":"input/#2-vcf-file","text":"Alternatively, you can submit a VCF file (version 4.2) with your variants. NOTE: The file can also be compressed either with zip, gzip, bzip2 or xz . oligopipe requires as minimum the presence of: the #Header Line : #CHROM POS ID REF ALT etc... the columns CHROM, POS, ID, REF, ALT, FORMAT, SAMPLE_NAME (patient information column containing values corresponding to the FORMAT field). the genotype (GT) field for each variant at the FORMAT and SAMPLE_NAME columns. We use GT to define the zygosity of the variant and to pick the correct alternative allele if there are multiple ones (separated by commas) in ALT. In case variants with GT: 0/0 ; 0|0 ; ./. ; . are present, these are discarded from the analysis. Allele combinations only consisting of alternative alleles (e.g. GT: 1/2 or 3/2) are handled as two separate heterozygous variants. Any other meta-information lines on the top of the file or any extra columns and fields (e.g. QUAL, INFO, etc.) can be present, but oligopipe will ignore them. NOTE: if your VCF contains information for several individuals , you should separate the information of each individual in different VCF files and run them individually. You can also download test VCFs to use with oligopipe from the ORVAL input page .","title":"2. VCF file"},{"location":"input/#variant-types","text":"You can either submit Single Nucleotide Variants (SNVs) or small insertions/deletions (indels) . Other types of variants (e.g. CNVs) can be present in your list, but they will not be included in the analysis. Specifically for indels, you can submit your variants in either one of the two different ways that are shown for a particular variant example (the VCF file can contain more columns). Tab-delimited list VCF file Example with dashes 16 3254468 CTT - Heterozygous 16 3254468 . CTT - PASS GT 1/0 Example without dashes 16 3254467 CCTT C Heterozygous 16 3254467 . CCTT C PASS GT 1/0","title":"Variant types"},{"location":"input/#genome-version","text":"At the moment oligopipe accepts and annotates variants using either the GRCh37/hg19 or the GRCh38/hg38 human genome assembly. We do not make conversions of genomic coordinates from different genome versions. In case you need to convert your variants, you are encouraged to use tools like the UCSC , Ensembl and NCBI assembly converters.","title":"Genome version"},{"location":"input/#patient-information","text":"Except from the variant list, you should also provide (if available) the sex information of the patient, i.e. if the person is a male (M) or a female (F). oligopipe handles differently X-linked variants in males ( hemizygous variants) compared to females, and therefore this information is important in order to provide better predictions.","title":"Patient information"},{"location":"input/#disease-information","text":"For the prioritize option only. To run the prioritization with Hop you need to add information about the patient's disease. This can be done by providing a list of HPO terms (and more specifically the HPO ids in format HP:0000XXX ), and/or a list of candidate genes from a gene panel ( HGNC gene names and Ensembl gene ids are accepted). At least one type of information needs to be provided or the prioritization job will not run. As command-line argument: Variant input: -hpo HPO_FILE, --hpo-terms HPO_FILE File containing a list of HPO IDs (e.g. HP:0001166). -gp PANEL_FILE --panel PANEL_FILE Gene panel file, containing a list of gene names or ENSGs. In the config YAML: gene_panel_file: hpo_terms_file:","title":"Disease information"},{"location":"preprocess/","text":"Data filtering and annotation # Data filtering # When passing no extra arguments to the oligopipe CLI, it will run with the default filtering procedure. There are two types of filtering offered by oligopipe : a variant filtering and a gene filtering procedure. 1. Variant filtering # As command-line arguments: Filtering options: -m MAX_MAF, --max-maf MAX_MAF The MAF to filter variants (default: 0.035). --keep-intron-syn Don't remove intronic and synonymous variants (not recommended). --keep-intergenic Don't remove intergenic variants (not recommended). In the config YAML: variant_filters: max_maf: 0.035 remove_intronic_synonymous: True remove_intergenic: True The variant filtering procedure ensures that your analysis will contain variants in accordance with the variant types used to train VarCoPP : exonic and splicing variants of MAF lower or equal than 3.5% in protein-coding genes. MAF # Allows to change the minimum threshold of MAF for the variants. A MAF of \u2264 0.035 was used to train VarCoPP and is the recommended/default threshold. Keep Intergenic # Add this flag if you want to disable the default setting of removing variants that are not inside the defined gene coordinates, based on the selected assembly (GRCh37/hg19 or GRCh38/hg38). Keep intronic and synonymous # Add this flag if you want to disable the following defaults: removing all intronic variants that have a distance bigger than 13 nucleotides from each exon edge, based on the exon coordinates of the canonical transcript of the gene. removing all synonymous variants that have a distance bigger than 195 nucleotides from each exon edge, based on the exon coordinates of the canonical transcript of the gene. NOTE: apart from the requested filtering steps, oligopipe may also exclude some extra variants during the data annotation process . You can consult the complete list of variant exclusion cases during that process here . 2. Gene filtering # For the predict option only. For the prioritize , all genes in the exome are considered. As command-line argument: Filtering options: -gp gene_panel, --panel gene_panel Gene panel file, containing a list of gene names or ENSGs to restrict the analysis. In the config YAML: gene_panel_file: The gene filtering option restricts the analysis to a specified list of relevant genes that can be present in your data. This procedure is highly recommended in case your VCF contains the complete exome of an individual, as it can dramatically limit the amount of False Positives that can be obtained. To run your analysis only with a subset of genes, you can simply upload a .txt file with the gene names / ENSGs you are interested to include, each gene being in a different line. oligopipe will use this list to filter the genes that will be used in the analysis. Data annotation # After you launch oligopipe , the program will: automatically annotate your data with the biological information needed for the integrated methods, for which it needs to connect to an annotation database ; create all possible variant combinations between any pair of genes present in your variant input; order the variants and genes inside each combination. Below, you can find some important parameters for each process. 1. Gene annotation # To map variants in genes, oligopipe uses at first the gene information that is present in the CADD annotation file for that variant and uses only the canonical transcripts of those genes, according to the Ensembl GRCh37/hg19 or GRCh38/hg38 genome version. In cases where a variant can be mapped to multiple genes , oligopipe maps that variant to only one gene based on a set of priority rules that include (starting from higher to lower priority): valid gene IDs and canonical transcript, prioritisation of genes based on their biotype and the functional consequence of the variant, prioritisation of genes where the variant falls inside the gene and canonical transcript coordinates, presence of a CCDS, prioritisation of gene with the longest canonical transcript, etc. oligopipe then annotates the genes with: the required gene features for VarCoPP (detailed description of the features and their sources in the link) the Residual Variation Intolerance Score (RVIS) , a metric that show the susceptibility of a gene to disease. Lower values of RVIS indicate greater susceptibility of a gene to candidate disease-causing mutations. 2. Gene pair annotation # oligopipe annotates a gene pair with the gene pair features required by VarCoPP . oligopipe uses the Residual Variation Intolerance Score (RVIS) metric to order the appearance of genes inside each digenic variant combination, with gene A being always the gene with the lower RVIS value, and thus more probable to be have a disturbed function due to the presence of a variant. You can find more details about how oligopipe creates digenic variant combinations and orders variants and genes in the Creating digenic variant combinations section. 3. Variant annotation # oligopipe first maps a variant in a gene based on the Gene annotation process described above. It then annotates each variant with the required variant features for VarCoPP , the most important being the CADD score . When oligopipe creates digenic variant combinations, it uses the CADD score to order the appearance of variants that are present inside the same gene (i.e. in cases of heterozygous compound variants). You can find more details about how oligopipe creates digenic variant combinations and orders variants and genes in the Creating digenic variant combinations section. Variant exclusion # In some situations during the data annotation process oligopipe excludes variants from the analysis and you will not find them in the results: Variant not exonic in canonical transcript We use only the canonical Ensembl transcript identifiers to annotate our variants. If you have selected to exclude intronic variants from your analysis, if the variant is not exonic in the canonical transcript of the gene, even if it may be exonic in an alternative transcript, it will be excluded. Variant with invalid zygosity Variants with GT: 0/0, 0|0, ./. or . in a VCF file are considered invalid and are excluded from the analysis. CADD score not available oligopipe annotates variants with a CADD score , which is a feature required for the pathogenicity predictions. As this feature is important for the predictions, if a CADD score is not available for a variant, that variant is excluded for the analysis, as a missing value may severely alter the results. Variants only in one gene As oligopipe creates combinations between gene pairs , if your input data includes variants from one gene only, you will not get any results. The variant is a CNV or medium/long-sized InDel oligopipe analyses only SNVs and small insertions and deletions (up to 100 bp currently). Any other variant type in your data is automatically excluded from the analysis. Creating digenic variant combinations # After annotation, VarCoPP creates all possible variant combinations between any gene pair present in your input, taking into consideration any filtering options you have included. You can find below a list of details and constraints that take place during this procedure. 1. Number of variants per combination # oligopipe creates for any gene pair variant combinations that can be: bi-allelic (i.e. one mutated allele at each gene) e.g.: one heterozygous variant per gene tri-allelic (i.e. three mutated alleles in total) e.g.: an homozygous variant at gene A and an heterozygous variant in gene B tetra-allelic (i.e. four mutated alleles in total) e.g.: one homozygous variant per gene In the tri-allelic and tetra-allelic cases, a digenic combination can also include heterozygous compound variants (i.e. two different mutated alleles in the same gene), along with the presence of variant(s) in another gene. NOTE: Tetra-allelic variant combinations with heterozygous compound variants in BOTH genes are not created. NOTE: In case where multiple heterozygous variants are present in a single gene, these are used together as heterozygous compound variants in a combination with another gene and not individually anymore. This is to solve the problem of certain genes being over-represented in the results just because they contain heterozygous compound variants. If a single gene contains more than two heterozygous variants, these are used in pairs of two as we always use two mutated alleles per gene. 2. Order of genes # For each digenic variant combination, gene A is always the gene with the lowest Residual Variation Intolerance Score (RVIS) (see also the Gene Annotation section) and, thus, the one with a higher probability to be associated with a disease. 3. Order of variant alleles inside the gene # In case of two different mutated alleles in the same gene (heterozygous compound cases), the variant allele 1 is always the variant allele with the highest CADD score . A graphical representation of a digenic combination:","title":"Preprocessing pipeline"},{"location":"preprocess/#data-filtering-and-annotation","text":"","title":"Data filtering and annotation"},{"location":"preprocess/#data-filtering","text":"When passing no extra arguments to the oligopipe CLI, it will run with the default filtering procedure. There are two types of filtering offered by oligopipe : a variant filtering and a gene filtering procedure.","title":"Data filtering"},{"location":"preprocess/#1-variant-filtering","text":"As command-line arguments: Filtering options: -m MAX_MAF, --max-maf MAX_MAF The MAF to filter variants (default: 0.035). --keep-intron-syn Don't remove intronic and synonymous variants (not recommended). --keep-intergenic Don't remove intergenic variants (not recommended). In the config YAML: variant_filters: max_maf: 0.035 remove_intronic_synonymous: True remove_intergenic: True The variant filtering procedure ensures that your analysis will contain variants in accordance with the variant types used to train VarCoPP : exonic and splicing variants of MAF lower or equal than 3.5% in protein-coding genes.","title":"1. Variant filtering"},{"location":"preprocess/#maf","text":"Allows to change the minimum threshold of MAF for the variants. A MAF of \u2264 0.035 was used to train VarCoPP and is the recommended/default threshold.","title":"MAF"},{"location":"preprocess/#keep-intergenic","text":"Add this flag if you want to disable the default setting of removing variants that are not inside the defined gene coordinates, based on the selected assembly (GRCh37/hg19 or GRCh38/hg38).","title":"Keep Intergenic"},{"location":"preprocess/#keep-intronic-and-synonymous","text":"Add this flag if you want to disable the following defaults: removing all intronic variants that have a distance bigger than 13 nucleotides from each exon edge, based on the exon coordinates of the canonical transcript of the gene. removing all synonymous variants that have a distance bigger than 195 nucleotides from each exon edge, based on the exon coordinates of the canonical transcript of the gene. NOTE: apart from the requested filtering steps, oligopipe may also exclude some extra variants during the data annotation process . You can consult the complete list of variant exclusion cases during that process here .","title":"Keep intronic and synonymous"},{"location":"preprocess/#2-gene-filtering","text":"For the predict option only. For the prioritize , all genes in the exome are considered. As command-line argument: Filtering options: -gp gene_panel, --panel gene_panel Gene panel file, containing a list of gene names or ENSGs to restrict the analysis. In the config YAML: gene_panel_file: The gene filtering option restricts the analysis to a specified list of relevant genes that can be present in your data. This procedure is highly recommended in case your VCF contains the complete exome of an individual, as it can dramatically limit the amount of False Positives that can be obtained. To run your analysis only with a subset of genes, you can simply upload a .txt file with the gene names / ENSGs you are interested to include, each gene being in a different line. oligopipe will use this list to filter the genes that will be used in the analysis.","title":"2. Gene filtering"},{"location":"preprocess/#data-annotation","text":"After you launch oligopipe , the program will: automatically annotate your data with the biological information needed for the integrated methods, for which it needs to connect to an annotation database ; create all possible variant combinations between any pair of genes present in your variant input; order the variants and genes inside each combination. Below, you can find some important parameters for each process.","title":"Data annotation"},{"location":"preprocess/#1-gene-annotation","text":"To map variants in genes, oligopipe uses at first the gene information that is present in the CADD annotation file for that variant and uses only the canonical transcripts of those genes, according to the Ensembl GRCh37/hg19 or GRCh38/hg38 genome version. In cases where a variant can be mapped to multiple genes , oligopipe maps that variant to only one gene based on a set of priority rules that include (starting from higher to lower priority): valid gene IDs and canonical transcript, prioritisation of genes based on their biotype and the functional consequence of the variant, prioritisation of genes where the variant falls inside the gene and canonical transcript coordinates, presence of a CCDS, prioritisation of gene with the longest canonical transcript, etc. oligopipe then annotates the genes with: the required gene features for VarCoPP (detailed description of the features and their sources in the link) the Residual Variation Intolerance Score (RVIS) , a metric that show the susceptibility of a gene to disease. Lower values of RVIS indicate greater susceptibility of a gene to candidate disease-causing mutations.","title":"1. Gene annotation"},{"location":"preprocess/#2-gene-pair-annotation","text":"oligopipe annotates a gene pair with the gene pair features required by VarCoPP . oligopipe uses the Residual Variation Intolerance Score (RVIS) metric to order the appearance of genes inside each digenic variant combination, with gene A being always the gene with the lower RVIS value, and thus more probable to be have a disturbed function due to the presence of a variant. You can find more details about how oligopipe creates digenic variant combinations and orders variants and genes in the Creating digenic variant combinations section.","title":"2. Gene pair annotation"},{"location":"preprocess/#3-variant-annotation","text":"oligopipe first maps a variant in a gene based on the Gene annotation process described above. It then annotates each variant with the required variant features for VarCoPP , the most important being the CADD score . When oligopipe creates digenic variant combinations, it uses the CADD score to order the appearance of variants that are present inside the same gene (i.e. in cases of heterozygous compound variants). You can find more details about how oligopipe creates digenic variant combinations and orders variants and genes in the Creating digenic variant combinations section.","title":"3. Variant annotation"},{"location":"preprocess/#variant-exclusion","text":"In some situations during the data annotation process oligopipe excludes variants from the analysis and you will not find them in the results: Variant not exonic in canonical transcript We use only the canonical Ensembl transcript identifiers to annotate our variants. If you have selected to exclude intronic variants from your analysis, if the variant is not exonic in the canonical transcript of the gene, even if it may be exonic in an alternative transcript, it will be excluded. Variant with invalid zygosity Variants with GT: 0/0, 0|0, ./. or . in a VCF file are considered invalid and are excluded from the analysis. CADD score not available oligopipe annotates variants with a CADD score , which is a feature required for the pathogenicity predictions. As this feature is important for the predictions, if a CADD score is not available for a variant, that variant is excluded for the analysis, as a missing value may severely alter the results. Variants only in one gene As oligopipe creates combinations between gene pairs , if your input data includes variants from one gene only, you will not get any results. The variant is a CNV or medium/long-sized InDel oligopipe analyses only SNVs and small insertions and deletions (up to 100 bp currently). Any other variant type in your data is automatically excluded from the analysis.","title":"Variant exclusion"},{"location":"preprocess/#creating-digenic-variant-combinations","text":"After annotation, VarCoPP creates all possible variant combinations between any gene pair present in your input, taking into consideration any filtering options you have included. You can find below a list of details and constraints that take place during this procedure.","title":"Creating digenic variant combinations"},{"location":"preprocess/#1-number-of-variants-per-combination","text":"oligopipe creates for any gene pair variant combinations that can be: bi-allelic (i.e. one mutated allele at each gene) e.g.: one heterozygous variant per gene tri-allelic (i.e. three mutated alleles in total) e.g.: an homozygous variant at gene A and an heterozygous variant in gene B tetra-allelic (i.e. four mutated alleles in total) e.g.: one homozygous variant per gene In the tri-allelic and tetra-allelic cases, a digenic combination can also include heterozygous compound variants (i.e. two different mutated alleles in the same gene), along with the presence of variant(s) in another gene. NOTE: Tetra-allelic variant combinations with heterozygous compound variants in BOTH genes are not created. NOTE: In case where multiple heterozygous variants are present in a single gene, these are used together as heterozygous compound variants in a combination with another gene and not individually anymore. This is to solve the problem of certain genes being over-represented in the results just because they contain heterozygous compound variants. If a single gene contains more than two heterozygous variants, these are used in pairs of two as we always use two mutated alleles per gene.","title":"1. Number of variants per combination"},{"location":"preprocess/#2-order-of-genes","text":"For each digenic variant combination, gene A is always the gene with the lowest Residual Variation Intolerance Score (RVIS) (see also the Gene Annotation section) and, thus, the one with a higher probability to be associated with a disease.","title":"2. Order of genes"},{"location":"preprocess/#3-order-of-variant-alleles-inside-the-gene","text":"In case of two different mutated alleles in the same gene (heterozygous compound cases), the variant allele 1 is always the variant allele with the highest CADD score . A graphical representation of a digenic combination:","title":"3. Order of variant alleles inside the gene"},{"location":"results/","text":"Result files # When you launch a pipeline with oligopipe , it will show logs and write results to different files. We offer a few options for managing those outputs. As command-line argument: Output: -dir output_path, --outdir output_path Output directory (defaults to working directory). -pre prefix, --prefix prefix Optional prefix for the output files, use for example the patient ID. -f, --force Force re-using an output directory, which may overwrite files. -v, --verbose Show debug logs # For prioritize option only -N, --nb-top-ranked The number of top-ranked combinations to retain (default = 100). In the config YAML: output: dir: prefix: Below is a description of the different result files. Results for every run # Metadata # A JSON file containing metadata about the pipeline run: Inputs and input settings (filters, gene panel ...) Output statistics Number of gene pairs Number of variant combinations Number of analysed variants, i.e. those that were not discarded Discarded variants # Variants can be discarded from the analysis for different reasons . A .txt file is created with a list of variants for each of the following categories: Invalid zygosity Filtered out variants Missing variants; i.e. the CADD score for these variants is missing from our database. NOTE: If you can share your variant data, don't hesitate to send us the variants with missing CADD score so that we can try to add them to our database. Prediction results # Raw results # A JSON file predictions_with_annotations.json containing predictions as well as the annotated features for each variant, gene and variant combination. Gene pair table # The previous JSON is used to produce a table ( predicted_gene_pairs.tsv ) providing statistics on all gene pairs present in your data. The table contains the statistics on the percentage and number of pathogenic variant combinations for each pair, and the median pathogenic score provided by VarCoPP among combinations of that pair, to get an idea of their severity. For further explanations on how this pathogenicity score is calculated, you can consult the VarCoPP section. Digenic combinations table # From the raw results we also create a table ( predicted_variant_combinations.tsv ) with all digenic variant combinations and their predictions. Prioritization results # Raw results # A JSON file predictions_with_annotations.json containing predictions as well as the annotated features for each variant, gene and variant combination. Digenic combinations table # From the raw results we also create a table ( prioritized_variant_combinations.tsv ) with the top N digenic variant combinations and their scores and ranks.","title":"Results"},{"location":"results/#result-files","text":"When you launch a pipeline with oligopipe , it will show logs and write results to different files. We offer a few options for managing those outputs. As command-line argument: Output: -dir output_path, --outdir output_path Output directory (defaults to working directory). -pre prefix, --prefix prefix Optional prefix for the output files, use for example the patient ID. -f, --force Force re-using an output directory, which may overwrite files. -v, --verbose Show debug logs # For prioritize option only -N, --nb-top-ranked The number of top-ranked combinations to retain (default = 100). In the config YAML: output: dir: prefix: Below is a description of the different result files.","title":"Result files"},{"location":"results/#results-for-every-run","text":"","title":"Results for every run"},{"location":"results/#metadata","text":"A JSON file containing metadata about the pipeline run: Inputs and input settings (filters, gene panel ...) Output statistics Number of gene pairs Number of variant combinations Number of analysed variants, i.e. those that were not discarded","title":"Metadata"},{"location":"results/#discarded-variants","text":"Variants can be discarded from the analysis for different reasons . A .txt file is created with a list of variants for each of the following categories: Invalid zygosity Filtered out variants Missing variants; i.e. the CADD score for these variants is missing from our database. NOTE: If you can share your variant data, don't hesitate to send us the variants with missing CADD score so that we can try to add them to our database.","title":"Discarded variants"},{"location":"results/#prediction-results","text":"","title":"Prediction results"},{"location":"results/#raw-results","text":"A JSON file predictions_with_annotations.json containing predictions as well as the annotated features for each variant, gene and variant combination.","title":"Raw results"},{"location":"results/#gene-pair-table","text":"The previous JSON is used to produce a table ( predicted_gene_pairs.tsv ) providing statistics on all gene pairs present in your data. The table contains the statistics on the percentage and number of pathogenic variant combinations for each pair, and the median pathogenic score provided by VarCoPP among combinations of that pair, to get an idea of their severity. For further explanations on how this pathogenicity score is calculated, you can consult the VarCoPP section.","title":"Gene pair table"},{"location":"results/#digenic-combinations-table","text":"From the raw results we also create a table ( predicted_variant_combinations.tsv ) with all digenic variant combinations and their predictions.","title":"Digenic combinations table"},{"location":"results/#prioritization-results","text":"","title":"Prioritization results"},{"location":"results/#raw-results_1","text":"A JSON file predictions_with_annotations.json containing predictions as well as the annotated features for each variant, gene and variant combination.","title":"Raw results"},{"location":"results/#digenic-combinations-table_1","text":"From the raw results we also create a table ( prioritized_variant_combinations.tsv ) with the top N digenic variant combinations and their scores and ranks.","title":"Digenic combinations table"},{"location":"varcopp/","text":"VarCoPP2.0 # Via the oligopipe predict submodule VarCoPP stands for Variant Combination Pathogenicity Predictor. It is a machine-learning method that predicts the pathogenicity of any bi-locus variant combination (i.e. a combination of two to four variant alleles between two genes). The method has been published in the PNAS journal: https://doi.org/10.1073/pnas.1815601116 . The first version of the model was later improved to VarCoPP2.0 using new training data, new features and a different type of model. VarCoPP2.0 has been published in BMC Bioinformatics : https://doi.org/10.1186/s12859-023-05291-3 . Based on VarCoPP, a bi-locus variant combination can either be candidate disease-causing or neutral . VarCoPP has been trained separately for the GRCh37/hg19 and GRCh38/hg38 genome assembly, the correct model will run based on your assembly choice in the input. NOTE: The use of VarCoPP for the analysis of complete patient exomes is NOT recommended, as the method is not fine-tuned for exomes. Please restrict your analysis to relevant gene panels for the disease of interest. If your VCF contains the complete exome of an individual, you can pass it to oligopipe predict as it is, and use the Variant Filtering and Gene Filtering options. Alternatively, you can run a HOP prioritization analysis on a complete exome using oligopipe prioritize (see HOP ). Structure of VarCoPP # ALGORITHM VarCoPP2.0 is a Balanced Random Forest (RF) predictor that consists of 400 decision trees. TRAINING DATA The VarCoPP2.0 predictor has been trained on the pathogenic variant combinations present in the Oligogenic Diseases Database (OLIDA) against a large subset of variant data derived from control individuals of the 1000 Genomes Project (1KGP) . The variant types that were used for training were the same for both OLIDA and 1KGP: exonic and splicing variants of up to 3.5% MAF, while all genes were protein coding genes. RESULT CALCULATION VarCoPP2.0 outputs a VarCoPP score , i.e. the probability (value between 0 and 1) that a variant combination belongs to the disease-causing class. If this probability is above 0.50 (hg19) or 0.4575 (hg38), the model predicts that the combination is disease-causing. Prediction features # VarCoPP uses different variant, gene and gene pair biological features to make the predictions. Feature Source Feature abbreviation Gene / Variant allele CADD raw score PMID: 24487276 CADD v1.6 CADD1 CADD2 CADD3 CADD4 Gene A / Variant allele 1 Gene A / Variant allele 2 Gene B / Variant allele 1 Gene B / Variant allele 2 Gene haploinsufficiency prediction PMID: 28137713 dbNSFP v4.1 HIPred_A HIPred_B Gene A Gene B Inheritance specific pathogenicity prediction for autosomal dominant (AD), autosomal recessive (AR), and X-linked (XL) modes of inheritance PMID: 27354691 publication supplementary data ISPP_AD_A ISPP_AD_B ISPP_AR_A ISPP_AR_B ISPP_XL_A Gene A Gene B Gene A Gene B Gene A Selective pressure (dN/dS) PMID: 26896847 Ensembl v99 dN_dS_A Gene A Biological distance PMID: 24694260 Human Gene Connectome v12.2015 Biol_Dist Gene pair AB Biological Process similarity PMID: 10802651 , 18460186 Gene Ontology v2021-12 BP_sim Gene pair AB Distance in an in-house developed Knowledge Graph PMID: 37644440 BOCK v1.0 KG_dist Gene pair AB Confidence zones # With VarCoPP2.0 we have defined 99% and 99.9%confidence zones, delimited by the prediction threshold, which provide a probability of whether a particular combination predicted as candidate disease-causing, is actually a True Positive (TP) result . This indication can be useful for further evaluation and filtering of the predictions. These confidence zones were created by testing neutral bi-locus combinations from the 1000 Genomes Project and obtaining the minimal prediction probability that gave 1% and 0.1% False Positives respectively. If a combination falls into either one of the two zones, a coloured indication will appear in the summary results. 99%-confidence zone Requires VarCoPP score \u2265 0.743 (hg19) or \u2265 0.647 (hg38). If a digenic combination falls inside this zone, it has 99% probability of being a TP result. 99.9%-confidence zone Requires VarCoPP score \u2265 0.891 (hg19) or \u2265 0.85 (hg38). If a digenic combination falls inside this zone, it has 99.9% probability of being a TP result.","title":"Prediction - VarCoPP"},{"location":"varcopp/#varcopp20","text":"Via the oligopipe predict submodule VarCoPP stands for Variant Combination Pathogenicity Predictor. It is a machine-learning method that predicts the pathogenicity of any bi-locus variant combination (i.e. a combination of two to four variant alleles between two genes). The method has been published in the PNAS journal: https://doi.org/10.1073/pnas.1815601116 . The first version of the model was later improved to VarCoPP2.0 using new training data, new features and a different type of model. VarCoPP2.0 has been published in BMC Bioinformatics : https://doi.org/10.1186/s12859-023-05291-3 . Based on VarCoPP, a bi-locus variant combination can either be candidate disease-causing or neutral . VarCoPP has been trained separately for the GRCh37/hg19 and GRCh38/hg38 genome assembly, the correct model will run based on your assembly choice in the input. NOTE: The use of VarCoPP for the analysis of complete patient exomes is NOT recommended, as the method is not fine-tuned for exomes. Please restrict your analysis to relevant gene panels for the disease of interest. If your VCF contains the complete exome of an individual, you can pass it to oligopipe predict as it is, and use the Variant Filtering and Gene Filtering options. Alternatively, you can run a HOP prioritization analysis on a complete exome using oligopipe prioritize (see HOP ).","title":"VarCoPP2.0"},{"location":"varcopp/#structure-of-varcopp","text":"ALGORITHM VarCoPP2.0 is a Balanced Random Forest (RF) predictor that consists of 400 decision trees. TRAINING DATA The VarCoPP2.0 predictor has been trained on the pathogenic variant combinations present in the Oligogenic Diseases Database (OLIDA) against a large subset of variant data derived from control individuals of the 1000 Genomes Project (1KGP) . The variant types that were used for training were the same for both OLIDA and 1KGP: exonic and splicing variants of up to 3.5% MAF, while all genes were protein coding genes. RESULT CALCULATION VarCoPP2.0 outputs a VarCoPP score , i.e. the probability (value between 0 and 1) that a variant combination belongs to the disease-causing class. If this probability is above 0.50 (hg19) or 0.4575 (hg38), the model predicts that the combination is disease-causing.","title":"Structure of VarCoPP"},{"location":"varcopp/#prediction-features","text":"VarCoPP uses different variant, gene and gene pair biological features to make the predictions. Feature Source Feature abbreviation Gene / Variant allele CADD raw score PMID: 24487276 CADD v1.6 CADD1 CADD2 CADD3 CADD4 Gene A / Variant allele 1 Gene A / Variant allele 2 Gene B / Variant allele 1 Gene B / Variant allele 2 Gene haploinsufficiency prediction PMID: 28137713 dbNSFP v4.1 HIPred_A HIPred_B Gene A Gene B Inheritance specific pathogenicity prediction for autosomal dominant (AD), autosomal recessive (AR), and X-linked (XL) modes of inheritance PMID: 27354691 publication supplementary data ISPP_AD_A ISPP_AD_B ISPP_AR_A ISPP_AR_B ISPP_XL_A Gene A Gene B Gene A Gene B Gene A Selective pressure (dN/dS) PMID: 26896847 Ensembl v99 dN_dS_A Gene A Biological distance PMID: 24694260 Human Gene Connectome v12.2015 Biol_Dist Gene pair AB Biological Process similarity PMID: 10802651 , 18460186 Gene Ontology v2021-12 BP_sim Gene pair AB Distance in an in-house developed Knowledge Graph PMID: 37644440 BOCK v1.0 KG_dist Gene pair AB","title":"Prediction features"},{"location":"varcopp/#confidence-zones","text":"With VarCoPP2.0 we have defined 99% and 99.9%confidence zones, delimited by the prediction threshold, which provide a probability of whether a particular combination predicted as candidate disease-causing, is actually a True Positive (TP) result . This indication can be useful for further evaluation and filtering of the predictions. These confidence zones were created by testing neutral bi-locus combinations from the 1000 Genomes Project and obtaining the minimal prediction probability that gave 1% and 0.1% False Positives respectively. If a combination falls into either one of the two zones, a coloured indication will appear in the summary results. 99%-confidence zone Requires VarCoPP score \u2265 0.743 (hg19) or \u2265 0.647 (hg38). If a digenic combination falls inside this zone, it has 99% probability of being a TP result. 99.9%-confidence zone Requires VarCoPP score \u2265 0.891 (hg19) or \u2265 0.85 (hg38). If a digenic combination falls inside this zone, it has 99.9% probability of being a TP result.","title":"Confidence zones"}]}